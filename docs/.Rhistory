slice(1:2) %>%
arrange(year, month) %>%
grid.table(.)
highest_grossing_products <- sales_data_modified %>%
group_by(Product) %>%
summarise(gross = sum(Gross.sales),
count = n()) %>%
arrange(-count) %>%
slice(1:10) %>%
filter(Product != "") %>%
grid.table(.)
highest_grossing_products <- sales_data_modified %>%
group_by(Product) %>%
summarise(gross = sum(Gross.sales),
count = n()) %>%
arrange(-gross) %>%
slice(1:10) %>%
filter(Product != "") %>%
grid.table(.)
highest_grossing_products_by_sales_channel <- sales_data_modified %>%
group_by(Product, Sales.channel) %>%
summarise(gross = sum(Gross.sales),
count = n()) %>%
arrange(-gross) %>%
group_by(Sales.channel) %>%
filter(Product != "") %>%
slice(1:3) %>%
grid.table(.)
mean_order_amount_by_sales_channel <- sales_data_modified %>%
group_by(Order) %>%
summarise(sale_value = sum(Gross.sales),
"sale channel" = Sales.channel) %>%
group_by(`sale channel`) %>%
summarise("mean order value" = mean(sale_value),
"median order value" = median(sale_value),
count=n()) %>%
grid.table(.)
knitr::opts_chunk$set(echo = TRUE)
#first we input the data
sales_data <- read.csv("/Users/zoeervolino/Downloads/sales_2020-09-01_2021-03-06.csv")
##spits out all variables names of our raw data prior to cleaning
names(sales_data)
##There were `r nrow(sales_data_modified$Gross.sales)` sales studied.
##Reformatting the date as a numerical variable in its own column:
sales_data_modified <- sales_data %>%
select(Date, Order, Product, Gross.sales, Sales.channel) %>%
mutate(Date = ymd_hms(Date),
date = round_date(Date, unit = "day"),
hour = hour(Date),
minute = minute(Date)) %>%
filter(date >= ymd("2020-09-01"))%>%
group_by(Order) %>%
filter(date == min(date))
##Creating a new dataframe that shows gross sales by day:
sales_by_day <- sales_data_modified %>%
group_by(date) %>%
summarise(sales = sum(Gross.sales)) %>% ## summarizing gross sales by day
arrange(-sales) %>% ##arranges highest to lowest, - reverses the order
mutate(dow = weekdays(date)) #mutate creates new variable, dow is new variable
##  and the fxn weekdays takes the date and spits out the corresponding weekday
## sorts sales by day by highest grossing order
sept_16 <- sales_data_modified %>%
filter(date == ymd("2020-09-16")) %>%
group_by(Order) %>%
summarise(sales = sum(Gross.sales)) %>%
arrange(-sales) %>%
grid.table(.)
sept_23 <- sales_data_modified %>%
filter(date == ymd("2020-09-23")) %>%
group_by(Order) %>%
summarise(sales = sum(Gross.sales)) %>%
arrange(-sales) %>%
grid.table(.)
library(ggplot2)
library(grid)
library(gridExtra)
sales_by_month <- sales_data_modified %>%
group_by(Order) %>%
summarise(sales = sum(Gross.sales), date = min(date)) %>%
group_by(month = month(date), year = year(date)) %>%
summarise("mean order value" = round(mean(sales), 2),
"median order value" = median(sales),
"gross sales" = sum(sales),
count=n()) %>%
arrange(-`gross sales`) %>%
grid.table(.)
sales_by_hour <- sales_data_modified %>%
group_by(hour) %>%
summarise(sales = sum(Gross.sales)) %>%
arrange(-sales) %>%
slice(1:10) %>%
grid.table(.)
highest_grossing_products_by_month <- sales_data_modified %>%
group_by(Product, month = month(date), year = year(date)) %>%
summarise(gross = sum(Gross.sales),
count = n()) %>%
arrange(-gross) %>%
group_by(month, year) %>%
slice(1:2) %>%
arrange(year, month) %>%
grid.table(.)
highest_grossing_products <- sales_data_modified %>%
group_by(Product) %>%
summarise(gross = sum(Gross.sales),
count = n()) %>%
arrange(-count) %>%
slice(1:10) %>%
filter(Product != "") %>%
grid.table(.)
highest_grossing_products <- sales_data_modified %>%
group_by(Product) %>%
summarise(gross = sum(Gross.sales),
count = n()) %>%
arrange(-gross) %>%
slice(1:10) %>%
filter(Product != "") %>%
grid.table(.)
highest_grossing_products_by_sales_channel <- sales_data_modified %>%
group_by(Product, Sales.channel) %>%
summarise(gross = sum(Gross.sales),
count = n()) %>%
arrange(-gross) %>%
group_by(Sales.channel) %>%
filter(Product != "") %>%
slice(1:3) %>%
grid.table(.)
mean_order_amount_by_sales_channel <- sales_data_modified %>%
group_by(Order) %>%
summarise(sale_value = sum(Gross.sales),
"sale channel" = Sales.channel) %>%
group_by(`sale channel`) %>%
summarise("mean order value" = mean(sale_value),
"median order value" = median(sale_value),
count=n()) %>%
grid.table(.)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(grid)
library(gridExtra)
library(dplyr)
library(lubridate)
#first we input the data
sales_data <- read.csv("/Users/zoeervolino/Downloads/sales_2020-09-01_2021-03-06.csv")
##spits out all variables names of our raw data prior to cleaning
names(sales_data)
##There were `r nrow(sales_data_modified$Gross.sales)` sales studied.
##Reformatting the date as a numerical variable in its own column:
sales_data_modified <- sales_data %>%
select(Date, Order, Product, Gross.sales, Sales.channel) %>%
mutate(Date = ymd_hms(Date),
date = round_date(Date, unit = "day"),
hour = hour(Date),
minute = minute(Date)) %>%
filter(date >= ymd("2020-09-01"))%>%
group_by(Order) %>%
filter(date == min(date))
##Creating a new dataframe that shows gross sales by day:
sales_by_day <- sales_data_modified %>%
group_by(date) %>%
summarise(sales = sum(Gross.sales)) %>% ## summarizing gross sales by day
arrange(-sales) %>% ##arranges highest to lowest, - reverses the order
mutate(dow = weekdays(date)) #mutate creates new variable, dow is new variable
##  and the fxn weekdays takes the date and spits out the corresponding weekday
## sorts sales by day by highest grossing order
sept_16 <- sales_data_modified %>%
filter(date == ymd("2020-09-16")) %>%
group_by(Order) %>%
summarise(sales = sum(Gross.sales)) %>%
arrange(-sales) %>%
grid.table(.)
sept_23 <- sales_data_modified %>%
filter(date == ymd("2020-09-23")) %>%
group_by(Order) %>%
summarise(sales = sum(Gross.sales)) %>%
arrange(-sales) %>%
grid.table(.)
knitr::opts_chunk$set(fig.pos = "!H", out.extra = "", echo = FALSE)
library(ggplot2)
library(grid)
library(gridExtra)
library(dplyr)
library(lubridate)
knitr::opts_chunk$set(fig.pos = "!H", out.extra = "", echo = FALSE)
library(ggplot2)
library(grid)
library(gridExtra)
library(dplyr)
library(lubridate)
#first we input the data
sales_data <- read.csv("/Users/zoeervolino/Downloads/sales_2020-09-01_2021-03-06.csv")
##spits out all variables names of our raw data prior to cleaning
names(sales_data)
##Reformatting the date as a numerical variable in its own column:
sales_data_modified <- sales_data %>%
select(Date, Order, Product, Gross.sales, Sales.channel) %>%
mutate(Date = ymd_hms(Date),
date = round_date(Date, unit = "day"),
hour = hour(Date),
minute = minute(Date)) %>%
filter(date >= ymd("2020-09-01"))%>%
group_by(Order) %>%
filter(date == min(date))
##Reformatting the date as a numerical variable in its own column:
sales_data_modified <- sales_data %>%
select(Date, Order, Product, Gross.sales, Sales.channel) %>%
mutate(Date = ymd_hms(Date),
date = round_date(Date, unit = "day"),
hour = hour(Date),
minute = minute(Date)) %>%
filter(date >= ymd("2020-09-01"))%>%
group_by(Order) %>%
filter(date == min(date))
names(sales_data_modified)
##Our simplified variables of interest are as follows:
names(sales_data_modified)
##Creating a new dataframe that shows gross sales by day:
sales_by_day <- sales_data_modified %>%
group_by(date) %>%
summarise(sales = sum(Gross.sales)) %>% ## summarizing gross sales by day
arrange(-sales) %>% ##arranges highest to lowest, - reverses the order
mutate(dow = weekdays(date))%>% #mutate creates new variable, dow is new variable
grid.table(.)  ##  and the fxn weekdays takes the date and spits out the corresponding weekday
## sorts sales by day by highest grossing order
sept_16 <- sales_data_modified %>%
filter(date == ymd("2020-09-16")) %>%
group_by(Order) %>%
summarise(sales = sum(Gross.sales)) %>%
arrange(-sales) %>%
grid.table(.)
sept_23 <- sales_data_modified %>%
filter(date == ymd("2020-09-23")) %>%
group_by(Order) %>%
summarise(sales = sum(Gross.sales)) %>%
arrange(-sales) %>%
grid.table(.)
sales_by_month <- sales_data_modified %>%
group_by(Order) %>%
summarise(sales = sum(Gross.sales), date = min(date)) %>%
group_by(month = month(date), year = year(date)) %>%
summarise("mean order value" = round(mean(sales), 2),
"median order value" = median(sales),
"gross sales" = sum(sales),
count=n()) %>%
arrange(-`gross sales`) %>%
grid.table(.)
highest_grossing_products_by_month <- sales_data_modified %>%
group_by(Product, month = month(date), year = year(date)) %>%
summarise(gross = sum(Gross.sales),
count = n()) %>%
arrange(-gross) %>%
group_by(month, year) %>%
slice(1:2) %>%
arrange(year, month) %>%
grid.table(.)
highest_grossing_products <- sales_data_modified %>%
group_by(Product) %>%
summarise(gross = sum(Gross.sales),
count = n()) %>%
arrange(-count) %>%
slice(1:10) %>%
filter(Product != "") %>%
grid.table(.)
highest_grossing_products <- sales_data_modified %>%
group_by(Product) %>%
summarise(gross = sum(Gross.sales),
count = n()) %>%
arrange(-gross) %>%
slice(1:10) %>%
filter(Product != "") %>%
grid.table(.)
highest_grossing_products_by_sales_channel <- sales_data_modified %>%
group_by(Product, Sales.channel) %>%
summarise(gross = sum(Gross.sales),
count = n()) %>%
arrange(-gross) %>%
group_by(Sales.channel) %>%
filter(Product != "") %>%
slice(1:3) %>%
grid.table(.)
mean_order_amount_by_sales_channel <- sales_data_modified %>%
group_by(Order) %>%
summarise(sale_value = sum(Gross.sales),
"sale channel" = Sales.channel) %>%
group_by(`sale channel`) %>%
summarise("mean order value" = mean(sale_value),
"median order value" = median(sale_value),
count=n()) %>%
grid.table(.)
install.packages('rmarkdown')
install.packages("rmarkdown")
install.packages('LaTex')
install.packages('LaTeX')
install.packages('tinytex')
install.packages("tinytex")
knitr::opts_chunk$set(fig.pos = "!H", out.extra = "", echo = FALSE)
library(ggplot2)
library(grid)
library(gridExtra)
library(dplyr)
library(lubridate)
#first we input the data
sales_data <- read.csv("/Users/zoeervolino/Downloads/sales_2020-09-01_2021-03-06.csv")
##spits out all variables names of our raw data prior to cleaning
names(sales_data)
##Reformatting the date as a numerical variable in its own column:
sales_data_modified <- sales_data %>%
select(Date, Order, Product, Gross.sales, Sales.channel) %>%
mutate(Date = ymd_hms(Date),
date = round_date(Date, unit = "day"),
hour = hour(Date),
minute = minute(Date)) %>%
filter(date >= ymd("2020-09-01"))%>%
group_by(Order) %>%
filter(date == min(date))
##Our simplified variables of interest are as follows:
names(sales_data_modified)
##Creating a new dataframe that shows gross sales by day:
sales_by_day <- sales_data_modified %>%
group_by(date) %>%
summarise(sales = sum(Gross.sales)) %>% ## summarizing gross sales by day
arrange(-sales) %>% ##arranges highest to lowest, - reverses the order
mutate(dow = weekdays(date))%>% #mutate creates new variable, dow is new variable
grid.table(.)  ##  and the fxn weekdays takes the date and spits out the corresponding weekday
## sorts sales by day by highest grossing order
sept_16 <- sales_data_modified %>%
filter(date == ymd("2020-09-16")) %>%
group_by(Order) %>%
summarise(sales = sum(Gross.sales)) %>%
arrange(-sales) %>%
grid.table(.)
sept_23 <- sales_data_modified %>%
filter(date == ymd("2020-09-23")) %>%
group_by(Order) %>%
summarise(sales = sum(Gross.sales)) %>%
arrange(-sales) %>%
grid.table(.)
sales_by_month <- sales_data_modified %>%
group_by(Order) %>%
summarise(sales = sum(Gross.sales), date = min(date)) %>%
group_by(month = month(date), year = year(date)) %>%
summarise("mean order value" = round(mean(sales), 2),
"median order value" = median(sales),
"gross sales" = sum(sales),
count=n()) %>%
arrange(-`gross sales`) %>%
grid.table(.)
sales_by_hour <- sales_data_modified %>%
group_by(hour) %>%
summarise(sales = sum(Gross.sales)) %>%
arrange(-sales) %>%
slice(1:10) %>%
grid.table(.)
highest_grossing_products_by_month <- sales_data_modified %>%
group_by(Product, month = month(date), year = year(date)) %>%
summarise(gross = sum(Gross.sales),
count = n()) %>%
arrange(-gross) %>%
group_by(month, year) %>%
slice(1:2) %>%
arrange(year, month) %>%
grid.table(.)
highest_grossing_products <- sales_data_modified %>%
group_by(Product) %>%
summarise(gross = sum(Gross.sales),
count = n()) %>%
arrange(-count) %>%
slice(1:10) %>%
filter(Product != "") %>%
grid.table(.)
highest_grossing_products <- sales_data_modified %>%
group_by(Product) %>%
summarise(gross = sum(Gross.sales),
count = n()) %>%
arrange(-gross) %>%
slice(1:10) %>%
filter(Product != "") %>%
grid.table(.)
highest_grossing_products_by_sales_channel <- sales_data_modified %>%
group_by(Product, Sales.channel) %>%
summarise(gross = sum(Gross.sales),
count = n()) %>%
arrange(-gross) %>%
group_by(Sales.channel) %>%
filter(Product != "") %>%
slice(1:3) %>%
grid.table(.)
mean_order_amount_by_sales_channel <- sales_data_modified %>%
group_by(Order) %>%
summarise(sale_value = sum(Gross.sales),
"sale channel" = Sales.channel) %>%
group_by(`sale channel`) %>%
summarise("mean order value" = mean(sale_value),
"median order value" = median(sale_value),
count=n()) %>%
grid.table(.)
install.packages('tinytex')
install.packages("tinytex")
tinytex::install_tinytex()
install.packages("tinytex", lib = /Volumes/RStudio-1.4.1106/Applications)
install.packages("tinytex", lib = zoeervolino/System/Library)
install.packages("tinytex", lib = zoeervolino/System/Library)
install.packages("tinytex", lib = zoervolino/System/Library)
knitr::opts_chunk$set(fig.pos = "!H", out.extra = "", echo = FALSE)
library(ggplot2)
library(grid)
library(gridExtra)
library(dplyr)
library(lubridate)
#first we input the data
sales_data <- read.csv("/Users/zoeervolino/Downloads/sales_2020-09-01_2021-03-06.csv")
##spits out all variables names of our raw data prior to cleaning
names(sales_data)
##Reformatting the date as a numerical variable in its own column:
sales_data_modified <- sales_data %>%
select(Date, Order, Product, Gross.sales, Sales.channel) %>%
mutate(Date = ymd_hms(Date),
date = round_date(Date, unit = "day"),
hour = hour(Date),
minute = minute(Date)) %>%
filter(date >= ymd("2020-09-01"))%>%
group_by(Order) %>%
filter(date == min(date))
##Our simplified variables of interest are as follows:
names(sales_data_modified)
##Creating a new dataframe that shows gross sales by day:
sales_by_day <- sales_data_modified %>%
group_by(date) %>%
summarise(sales = sum(Gross.sales)) %>% ## summarizing gross sales by day
arrange(-sales) %>% ##arranges highest to lowest, - reverses the order
mutate(dow = weekdays(date))%>% #mutate creates new variable, dow is new variable
grid.table(.)  ##  and the fxn weekdays takes the date and spits out the corresponding weekday
## sorts sales by day by highest grossing order
sept_16 <- sales_data_modified %>%
filter(date == ymd("2020-09-16")) %>%
group_by(Order) %>%
summarise(sales = sum(Gross.sales)) %>%
arrange(-sales) %>%
grid.table(.)
sept_23 <- sales_data_modified %>%
filter(date == ymd("2020-09-23")) %>%
group_by(Order) %>%
summarise(sales = sum(Gross.sales)) %>%
arrange(-sales) %>%
grid.table(.)
install.packages("tinytex", lib = /Users/zoeervolino/System/Library)
install.packages("tinytex", lib = "/Users/zoeervolino/System/Library")
yes
knit_with_parameters('~/Downloads/StellaTestReport.Rmd')
knitr::opts_chunk$set(fig.pos = "!H", out.extra = "", echo = FALSE)
library(ggplot2)
library(grid)
library(gridExtra)
library(dplyr)
library(lubridate)
install.packages('placeins')
knitr::opts_chunk$set(fig.pos = "!H", out.extra = "", echo = FALSE)
library(ggplot2)
library(grid)
library(gridExtra)
library(dplyr)
library(lubridate)
##Our simplified variables of interest are as follows:
names(sales_data_modified)
##Our simplified variables of interest are as follows:
names(sales_data_modified)
install.packages("kableExtra")
sales_by_day <- sales_data_modified %>%
group_by(date) %>%
summarise(sales = sum(Gross.sales)) %>% ## summarizing gross sales by day
arrange(-sales) %>% ##arranges highest to lowest, - reverses the order
mutate(dow = weekdays(date))%>% #mutate creates new variable, dow is new variable
slice(1:20) %>%
grid.table(.) %>%
dt %>%
kbl(caption = "Recreating booktabs style table") %>%
kable_classic(full_width = F, html_font = "Cambria")
knitr::opts_chunk$set(echo = TRUE)
iframe allow="autoplay *; encrypted-media *; fullscreen *" frameborder="0" height="450" style="width:100%;max-width:660px;overflow:hidden;background:transparent;" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-storage-access-by-user-activation allow-top-navigation-by-user-activation" src="https://embed.music.apple.com/us/playlist/sophie-the-villain/pl.u-mJy82Y7IBa11Y8"></iframe
child:<iframe allow="autoplay *; encrypted-media *; fullscreen *" frameborder="0" height="450" style="width:100%;max-width:660px;overflow:hidden;background:transparent;" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-storage-access-by-user-activation allow-top-navigation-by-user-activation" src="https://embed.music.apple.com/us/playlist/sophie-the-villain/pl.u-mJy82Y7IBa11Y8"></iframe>
child:iframe allow="autoplay *; encrypted-media *; fullscreen *" frameborder="0" height="450" style="width:100%;max-width:660px;overflow:hidden;background:transparent;" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-storage-access-by-user-activation allow-top-navigation-by-user-activation" src="https://embed.music.apple.com/us/playlist/sophie-the-villain/pl.u-mJy82Y7IBa11Y8"></iframe
knitr:::pandoc_to()
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
embed_audio(/Users/zoeervolino/Desktop/sophie dillon/nudes in my bedroom bounce 2.mp3
embed_audio(
src = /Users/zoeervolino/Desktop/sophie dillon/nudes in my bedroom bounce 2.mp3
embed_audio(
src, /Users/zoeervolino/Desktop/sophie dillon/nudes in my bedroom bounce 2.mp3
library(embedr)
knitr::opts_chunk$set(echo = TRUE)
if(!"devtools" %in% rownames(installed.packages())) install.packages("devtools")
devtools::install_github("mccarthy-m-g/embedr")
library(knitr)
library(embedr)
nudes <- /Users/zoeervolino/Desktop/sophie dillon/nudes in my bedroom bounce 2.mp3
nudes <- n:/Users/zoeervolino/Desktop/sophie dillon/nudes in my bedroom bounce 2.mp3
nudes <- (/Users/zoeervolino/Desktop/sophie dillon/nudes in my bedroom bounce 2.mp3)
nudes <-
<source src="/Users/zoeervolino/Desktop/sophie dillon/nudes in my bedroom bounce 2.mp3" type=mpeg">
<source src="/Users/zoeervolino/Desktop/sophie dillon/nudes in my bedroom bounce 2.mp3" type=mpeg">
nudes <- "/Users/zoeervolino/Desktop/sophie dillon/nudes in my bedroom bounce 2.mp3"
embed_audio(nudes
src,
embed_audio(
src=nudes,
type = c("mpeg", "ogg", "wav"),
attribute = c("controls", "autoplay", "loop", "muted", "preload", "none"),
id = "",
placeholder = ""
)
setwd("~/")
setwd("~/Documents/ruby/docs")
